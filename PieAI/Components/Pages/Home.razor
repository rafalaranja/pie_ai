@page "/"
@using System.Text.Json
@rendermode InteractiveServer


<PageTitle>Home</PageTitle>
<div class=" d-flex justify-content-center pt-5 pb-5">
</div>

<!-- Main Container -->
<div class="d-flex justify-content-around pt-5 pb-5">

    <!-- Container da esquerda -->
    <div class="d-flex justify-content-center flex-column">
        <!-- Container do botão -->
        <div class="d-flex justify-content-center pb-5">
            <button class="btn btn-dark" @onclick="GetSuggestions">Review Metrics</button>
        </div>
        <!-- Container da tabela -->
        <div class="d-flex justify-content-center">
            <table class="table table-striped">
                <thead class="table-secondary">
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Current</th>
                        <th scope="col">Recommended</th>
                        <th scope="col">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var suggestion in suggestions)
                    {
                        <tr>
                            <td>@suggestion.Name</td>
                            <td>@suggestion.Current</td>
                            <td>@suggestion.Recommended</td>
                            <td>
                                <button class="btn btn-success" @onclick="() => ClearLine(suggestion)">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle" viewBox="0 0 16 16">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                                        <path d="m10.97 4.97-.02.022-3.473 4.425-2.093-2.094a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05" />
                                    </svg>
                                </button><button class="btn btn-danger ms-1" @onclick="() => ClearLine(suggestion)">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-circle" viewBox="0 0 16 16">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                                        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708" />
                                    </svg>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div> 
    </div>



    <!-- Container da direita -->
    <div class="d-flex justify-content-center flex-column">
        <!-- Container do botão -->
        <div class="d-flex justify-content-center pb-3">
            <button class="btn btn-dark" @onclick="GeneratePlan">Generate Plan</button>
        </div>
        <!-- Container da tabela -->
        <div class="d-flex justify-content-center flex-column">
            @response
            @foreach(var plan in plans){
                <!-- Container do id e data -->
                <div class="d-flex justify-content-between">
                    <p>@plan.GetProperty("description").GetString()</p>
                    <p>@plan.GetProperty("date").GetString()</p>
                </div>
                <!-- Container inline -->
                <div class="d-flex d-inline-flex">
                    <!-- Container raw material -->
                    <div class="d-flex justify-content-center p-2">
                        <textarea class="form-control " rows="8" cols="30" value="@response" readonly style="resize: none;">
                            @foreach (var sale in plan.GetProperty("sales").EnumerateArray())
                            {
                                @sale.GetProperty("date").GetString()
                                @sale.GetProperty("product_name").GetString()
                                @sale.GetProperty("quantity").GetInt32()
                            }
                        </textarea>
                    </div>
                    <!-- Container orders -->
                    <div class="d-flex justify-content-center p-2">
                        <textarea class="form-control " rows="8" cols="30"  readonly style="resize: none;">
                            @foreach (var req in plan.GetProperty("planRequirements").EnumerateArray())
                            {
                                @req.GetProperty("productSize_name").GetString()
                                @req.GetProperty("required_quantity").GetInt32()}
                        </textarea>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


<!-- ChatBot -->
<div>
    <div class="d-flex justify-content-end pt-5 pb-5">
        <button class="btn btn-dark btn-outline-light" @onclick="ToggleChat">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-robot" viewBox="0 0 16 16">
                <path d="M6 12.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5M3 8.062C3 6.76 4.235 5.765 5.53 5.886a26.6 26.6 0 0 0 4.94 0C11.765 5.765 13 6.76 13 8.062v1.157a.93.93 0 0 1-.765.935c-.845.147-2.34.346-4.235.346s-3.39-.2-4.235-.346A.93.93 0 0 1 3 9.219zm4.542-.827a.25.25 0 0 0-.217.068l-.92.9a25 25 0 0 1-1.871-.183.25.25 0 0 0-.068.495c.55.076 1.232.149 2.02.193a.25.25 0 0 0 .189-.071l.754-.736.847 1.71a.25.25 0 0 0 .404.062l.932-.97a25 25 0 0 0 1.922-.188.25.25 0 0 0-.068-.495c-.538.074-1.207.145-1.98.189a.25.25 0 0 0-.166.076l-.754.785-.842-1.7a.25.25 0 0 0-.182-.135" />
                <path d="M8.5 1.866a1 1 0 1 0-1 0V3h-2A4.5 4.5 0 0 0 1 7.5V8a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1v1a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-1a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1v-.5A4.5 4.5 0 0 0 10.5 3h-2zM14 7.5V13a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V7.5A3.5 3.5 0 0 1 5.5 4h5A3.5 3.5 0 0 1 14 7.5" />
            </svg>
            ChatBot
        </button>
    </div>
</div>

@if (showChat)
{
    <div class="chat-window border rounded shadow p-3 bg-light" style="position: fixed; bottom: 100px; right: 40px; width: 350px; z-index: 1050;">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <strong>ChatBot</strong>
            <button class="btn btn-sm btn-outline-danger" @onclick="ToggleChat">X</button>
        </div>
        <div style="height: 200px; overflow-y: auto;">
            <!-- Render all chat messages -->
            @foreach (var message in chatMessages)
            {
                var isEven = chatMessages.IndexOf(message) % 2 == 0;
                if (isEven)
                {
                    <div class="d-flex justify-content-end p-2 m-2 bg-dark text-white rounded">@message</div>
                    continue;
                }

                <div class="d-flex justify-content-start p-2 m-2 bg-white text-dar rounded">@message</div>
            }
        </div>
        <div class="mt-2 d-flex">
            <input class="form-control me-2"
            placeholder="Type your message..."
            @bind="chatInput"
            @onkeydown="HandleInputKeyDown" />
            <button class="btn btn-success" @onclick="SendMessage">Send</button>
        </div>
    </div>
}



<!-- Código C# -->
@code {
    public string response = "";
    private List<JsonElement> plans = new();
    private bool showChat = false;

    // Chat state
    private List<string> chatMessages = new();
    private string chatInput = string.Empty;

    //Recommendations Table
    private List<Suggestion> suggestions = new();

    ApiServiceTest apiService = new ApiServiceTest();

    private async Task GeneratePlan()
    {

        //  response = await apiService.GeneratePlan();


        var instruction =
        "Geram-me um plano para um dia para sermos capazes de satisfazer as encomendas pela ordem de entrega. " +
        "Gera um productionPlan e o output mostrar as 'sales' que irá satisfazer bem como a quantidade de matéria prima necessária por product_size. O output deve respeitar a seguinte estrutura, não adiciones texto/informação extra tirando o que é pedido no json e nesse formato:  ";

        var jsonObj = new
        {
            productionPlans = new
            {
                date = "",
                description = "",
                sales = new[] { new { date = "", product_name = "", quantity = "" } },
                planRequirements = new[] { new { id_plan = "", productSize_name = "", required_quantity = "" } }
            }
        };

        // prompt final: string de instruções + JSON (serializado, sem escapar manualmente)
        string prompt = instruction + JsonSerializer.Serialize(jsonObj);

        response = await apiService.SendPromptWithKnowledgeBase(prompt);

        if (!string.IsNullOrWhiteSpace(response))
        {
            using var doc = JsonDocument.Parse(response);
            var productionPlans = doc.RootElement.GetProperty("productionPlans");
            response = productionPlans.ToString();
            //plans = productionPlans.EnumerateArray().ToList();
        }

    }

    private void ToggleChat()
    {
        showChat = !showChat;
    }

    public void ClearLine(Suggestion suggestion)
    {
        suggestions.Remove(suggestion);
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(chatInput))
        {
            chatMessages.Add(chatInput);
            var msg = chatInput;
            chatInput = string.Empty;
            chatMessages.Add(await apiService.SendPromptWithKnowledgeBase(msg));
        }
    }

    private async Task GetSuggestions()
    {
        string instruction = @"
Go through your technical lists, and compare the expected values (expected_time, expected_yield and expected_labour_hours) and compare them with actual_time, actual_yield and actual_labour_hours from productionExecutions respectively.

You should do the calculations taking in account that a productionExecutions refers to a planRequirements which is detailed by planRequirementDetails and these are linked to technical lists. From this relation you should be able to compare expected values with actual ones.

If you identify a considerable descrepancy between expected/actual of a specific technical list. 

Prepare the output in the following json structure and NO extra information/considerations:

[{ 
""Name"": {Descriptor of the technical list + the field (can be time, yield and hours)}, ""Current"": {expected_values}, ""Recommended"": ""{your_recomended_calculation}"" 
}, ...]

## Example of a Wrong output and explanation:
Based on the retrieved results, here is the comparison between expected and actual values for each technical list: -> Should not have text besides json structure;
[
  {
    ""id_list"": 1, -> Should not expose Ids, also the only fields to be displayed are ""Name"", ""Current"" and ""Recommended""; 
    ""expected_time"": 20,
    ""actual_time"": 50,
    ""expected_yield"": 0.50,
    ""actual_yield"": 0.65,
    ""expected_labour_hours"": 1.5,
    ""actual_labour_hours"": 4.0
  }
]
Note: The model only compared the technical lists that had corresponding production executions. The other technical lists were not included in the comparison as there were no matching production executions found in the retrieved results. -> Should not have text besides json structure;

## Example of a Correct output:
[
  {
    ""Name"": ""Tempo estimado para produzir peito de frango a partir de Frango 18"",
    ""Current"": 20,
    ""Recommended"": 50
  },
  {
    ""Name"": ""Rendimento estimado para produzir peito de frango a partir de Frango 18"",
    ""Current"": 0.50,
    ""Recommended"": 0.65
  }
]

Considerations: The ""Name"" should be in portuguese as seen in the example above. Do not write anything else that is not in the json format.
";
        ;


        var jsonObj = new
        {
            productionPlans = new
            {
                date = "",
                description = "",
                sales = new[] { new { date = "", product_name = "", quantity = "" } },
                planRequirements = new[] { new { id_plan = "", productSize_name = "", required_quantity = "" } }
            }
        };

        // prompt final: string de instruções + JSON (serializado, sem escapar manualmente)
        string prompt = instruction + JsonSerializer.Serialize(jsonObj);

        string rawSug;
        rawSug = await apiService.SendPromptWithKnowledgeBase(instruction);
        try
        {
            suggestions = JsonSerializer.Deserialize<List<Suggestion>>(rawSug);

        }catch(Exception e)
        {
            throw;
        }

        // if (!string.IsNullOrWhiteSpace(response))
        // {
        //     using var doc = JsonDocument.Parse(response);
        //     var productionPlans = doc.RootElement.GetProperty("productionPlans");
        //     response = productionPlans.ToString();
        //     //plans = productionPlans.EnumerateArray().ToList();
        // }
    }

    private void HandleInputKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SendMessage();
        }
    }
}